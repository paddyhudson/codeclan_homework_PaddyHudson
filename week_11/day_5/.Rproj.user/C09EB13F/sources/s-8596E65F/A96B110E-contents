---
title: "Tf IDF and N-Grams"
output: html_notebook
---

```{r}
library(tidyverse)
library(tidytext)
library(janeaustenr)

sentences <- c(
  "This is a sentence about cats.",
  "This is a sentence about dogs.",
  "This is a sentence about alligators."
)

sentences_df <- tibble(
  sentence = sentences,
  id = 1:3
) %>%
unnest_tokens(word, sentence) 

sentences_df %>% 
  count(word, id) %>% 
  bind_tf_idf(word, id, n)
```

```{r}
titles <- c("Pride and Prejudice", "Sense and Sensibility", "Emma", "Persuasion", "Mansfield Park", "Northanger Abbey")

books <- list(prideprejudice, sensesensibility, emma, persuasion, mansfieldpark,  northangerabbey)
```

```{r}
books <- map(books, paste, collapse = " ")

str(books)
```

```{r}
all_books_df <- tibble(
  title = titles,
  text = books
  ) %>% 
  unnest_tokens(word, text)
```

```{r}
all_books_tf_idf <- all_books_df %>% 
  count(word, title) %>% 
  bind_tf_idf(word, title, n)

all_books_tf_idf %>% 
  group_by(title) %>% 
  slice_max(tf_idf, n = 5) %>%
  arrange(desc(rank(tf_idf)), title)

all_books_tf_idf %>% 
  group_by(title) %>% 
  slice_max(tf_idf, n = 5) %>% 
  mutate(rank = rank(tf_idf)) %>% 
  order
```
```{r}
phrases <- c(
  "here is some text",
  "again more text",
  "text is text"
)

phrases_df <- tibble(
  phrase = phrases,
  id     = 1:3
) 

phrases_df <- phrases_df %>% 
  unnest_tokens(bigram, phrase, token = "ngrams", n = 2)

phrases_df
```

```{r}
sense_df <- tibble(
  id = 1:length(prideprejudice),
  phrase = prideprejudice
  ) %>% 
  unnest_tokens(bigram, phrase, token = "ngrams", n = 2) %>%
  drop_na() %>% 
  filter(!(
    map(str_split(bigram, pattern = " "), 1) %in% stop_words$word |
    map(str_split(bigram, pattern = " "), 2) %in% stop_words$word
    )) %>%
  count(bigram, sort = TRUE)

sense_df
```

```{r}
stop_words
```

```{r}
tibble(
  bigram = "it is"
) %>% 
  
  filter((
    str_split(bigram, pattern = " ")[[1]][1] %in% stop_words$word &
    str_split(bigram, pattern = " ")[[1]][2] %in% stop_words$word
  ))
```

